urlApi = "http://apis.datos.gob.ar/georef/api/direcciones")
}),fill = TRUE)
}
return(salida)
}
library(wrapar)
devtools::install()
export(geocodeDirecciones)
library(wrapar)
wrapar::checkInternet()
?wrapar::checkInternet()
?wrapar::geocodeDirecciones()
?geocodeDirecciones()
devtools::document()
devtools::document()
?geocodeDirecciones()
devtools::document()
devtools::check(document = TRUE)
devtools::check(document = TRUE)
devtools::check(document = TRUE)
devtools::check(document = TRUE)
devtools::check(document = TRUE)
devtools::install()
library(wrapar)
?geocodeDirecciones
devtools::check(document = TRUE)
devtools::install()
devtools::install()
?geocodeDirecciones
?geocodeDirecciones
devtools::build()
devtools::install()
?wrapar::geocodeDirecciones
?wrapar::geocodeDirecciones
library(wrapar)
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
salida <- geocodeDirecciones(datos=muestra,
col_direccion = "direccion",
col_provincia = "provincia")
muestra
class(muestra)
muestra
datos=muestra
col_direccion = "direccion"
col_provincia = "provincia"
mustExist <- c(col_direccion,col_provincia,col_departamento)
col_departamento = NULL
api="datosgobar"
max_returns=1
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
mustExist <- c(col_direccion,col_provincia,col_departamento)
faltantes <- mustExist[!mustExist %in% colnames(datos)]
faltantes
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 4)
salida<-rbindlist(lapply(1:nrow(datos),function(x){
setTxtProgressBar(pb, x)
geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
max_returns = 1,
urlApi = "http://apis.datos.gob.ar/georef/api/direcciones")
}),fill = TRUE)
library(data.table)
salida<-rbindlist(lapply(1:nrow(datos),function(x){
setTxtProgressBar(pb, x)
geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
max_returns = 1,
urlApi = "http://apis.datos.gob.ar/georef/api/direcciones")
}),fill = TRUE)
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
geocodeDir <- function(direccion,provincia=NULL,departamento=NULL, max_returns=1,urlApi=NULL) {
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args <- args[!sapply(args,function(x) {is.null(x) | class(x) %in% c('data.frame','data.table') | x==""})]
checkInternet()
response <-httr::GET(urlApi,query=args)
checkResponseStatus(response)
jsonRes <- jsonlite::fromJSON(httr::content(response,'text',encoding = 'UTF-8'))
nMatchAPI<-jsonRes$cantidad
if(nMatchAPI==0) {
geocodeResult <- list()
} else {
geocodeResult <- data.table(jsonRes$direcciones)[,c("calle.nombre","departamento.nombre","localidad_censal.nombre","nomenclatura","ubicacion.lat","ubicacion.lon")][1,]
}
return(data.table(geocodeResult,nMatchAPI))
}
salida<-rbindlist(lapply(1:nrow(datos),function(x){
setTxtProgressBar(pb, x)
geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
max_returns = 1,
urlApi = "http://apis.datos.gob.ar/georef/api/direcciones")
}),fill = TRUE)
direccion
x <- 1
=datos[x,col_direccion]
direccion=datos[x,col_direccion]
provincia=datos[x,col_provincia]
departamento =datos[x,col_departamento]
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args
args <- args[!sapply(args,function(x) {is.null(x) | class(x) %in% c('data.frame','data.table') | x==""})]
args
sapply(args,function(x) {is.null(x) | class(x) %in% c('data.frame','data.table') | x==""})
args
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table') | x=="" )})]
sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table') | x=="" )})
x <- args[[3]]
x
is.null(x)
class(x)
x==2
x==""
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
args
devtools::install()
require(wrapar)
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
salida <- geocodeDirecciones(datos=muestra,
col_direccion = "direccion",
col_provincia = "provincia")
salida
salida <- geocodeDirecciones(datos=muestra,
col_direccion = "direccion",}
col_provincia = "provincia")
salida <- geocodeDirecciones(datos=muestra,
col_direccion = "direccion",
col_provincia = "provincia")
View(muestra)
datos=muestra
col_direccion = "direccion"
col_provincia = "provincia"
col_departamento = NULL
api="datosgobar"
max_returns=1
# attempt::stop_if(.x = api,.p = ~ !.x %in% c("datosgobar","gcba")
# msg = paste0("El valor de API es incorrecto. Debe ser ",paste(c("'datosgobar'","'gcba'"),collapse = " o ")))
urlApi <- switch(api,
"datosgobar" = "http://apis.datos.gob.ar/georef/api/direcciones",
"gcba" = "square")
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
mustExist <- c(col_direccion,col_provincia,col_departamento)
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 4)
salida<-rbindlist(lapply(1:nrow(datos),function(x){
setTxtProgressBar(pb, x)
cat(x)
geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
max_returns = 1,
urlApi = "http://apis.datos.gob.ar/georef/api/direcciones")
}),fill = TRUE)
library(data.table)
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
geocodeDir <- function(direccion,provincia=NULL,departamento=NULL, max_returns=1,urlApi=NULL) {
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
checkInternet()
response <-httr::GET(urlApi,query=args)
checkResponseStatus(response)
jsonRes <- jsonlite::fromJSON(httr::content(response,'text',encoding = 'UTF-8'))
nMatchAPI<-jsonRes$cantidad
if(nMatchAPI==0) {
geocodeResult <- list()
} else {
geocodeResult <- data.table(jsonRes$direcciones)[,c("calle.nombre","departamento.nombre","localidad_censal.nombre","nomenclatura","ubicacion.lat","ubicacion.lon")][1,]
}
return(data.table(geocodeResult,nMatchAPI))
}
salida<-rbindlist(lapply(1:nrow(datos),function(x){
setTxtProgressBar(pb, x)
cat(x)
geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
max_returns = 1,
urlApi = "http://apis.datos.gob.ar/georef/api/direcciones")
}),fill = TRUE)
# Funciones que tienen por objetivo detectar fallas en la conexión a internet
# o en la conexión con la API
checkInternet <- function(){
attempt::stop_if_not(.x = curl::has_internet(),msg = "Error: no se detecta conexión a internet.")
}
checkResponseStatus <- function(response){
attempt::stop_if_not(.x=response$status_code,
.p = ~ .x == 200,
msg = "Error: hubo algún problema en la respuesta de la API")
}
salida<-rbindlist(lapply(1:nrow(datos),function(x){
setTxtProgressBar(pb, x)
cat(x)
geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
max_returns = 1,
urlApi = "http://apis.datos.gob.ar/georef/api/direcciones")
}),fill = TRUE)
x <- 122
cat(x)
geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
max_returns = 1,
urlApi = "http://apis.datos.gob.ar/georef/api/direcciones")
datos[x,col_direccion]
datos[x,col_provincia]
datos[x,col_departamento]
direccion=datos[x,col_direccion]
provincia=datos[x,col_provincia]
departamento =datos[x,col_departamento]
max_returns=1
geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
max_returns = max_returns,
urlApi = urlApi)
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
args
checkInternet()
response <-httr::GET(urlApi,query=args)
response
direccion <- "GUIRALDES INTENDENTE 0"
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
checkInternet()
response <-httr::GET(urlApi,query=args)
response
direccion
direccion <- "GUIRALDES INTENDENTE 1240"
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
checkInternet()
response <-httr::GET(urlApi,query=args)
response
direccion <- "GUIRALDES INTENDENTE 01243"
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
checkInternet()
response <-httr::GET(urlApi,query=args)
response
args
response <-httr::GET(urlApi,query=args)
response
urlApi
args
response <-httr::GET(urlApi,query=args)
response
direccion
direccion <- "GUIRALDES INTENDENTE 0"
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
gsub(pattern = "[:alpha:]",replacement = "",x = direccion)
gsub(pattern = "^[:alpha:]",replacement = "",x = direccion)
gsub(pattern = "^[::alpha::]",replacement = "",x = direccion)
gsub("[^0-9.-]", "", direccion)
gsub("[^0-9.-]", "", direccion)=="0"
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
geocodeDir <- function(direccion,provincia=NULL,departamento=NULL, max_returns=1,urlApi=NULL) {
if (gsub("[^0-9.-]", "", direccion)=="0") {
return(data.table())
}
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = max_returns)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
gsub("[^0-9.-]", "", direccion)
checkInternet()
response <-httr::GET(urlApi,query=args)
checkResponseStatus(response)
jsonRes <- jsonlite::fromJSON(httr::content(response,'text',encoding = 'UTF-8'))
nMatchAPI<-jsonRes$cantidad
if(nMatchAPI==0) {
geocodeResult <- list()
} else {
geocodeResult <- data.table(jsonRes$direcciones)[,c("calle.nombre","departamento.nombre","localidad_censal.nombre","nomenclatura","ubicacion.lat","ubicacion.lon")][1,]
}
return(data.table(geocodeResult,nMatchAPI))
}
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
salida <- geocodeDirecciones(datos=muestra,
col_direccion = "direccion",
col_provincia = "provincia")
devtools::build()
devtools::install()
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
require(wrapar)
salida <- geocodeDirecciones(datos=muestra,
col_direccion = "direccion",
col_provincia = "provincia")
salida
View(salida)
View(muestra)
View(salida)
sum(!is.na(salida$calle.nombre))
sum(is.na(salida$calle.nombre))
devtools::build()
devtools::install()
require(wrapar)
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
salida <- geocodeDirecciones(datos=muestra,
col_direccion = "direccion",
col_provincia = "provincia")
View(salida)
geocodeResult
salida
devtools::build()
devtools::install()
require(wrapar)
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
muestra$id <- 1:nrow(muestra)
salida <- geocodeDirecciones(datos=muestra,
id_col= "id",
col_direccion = "direccion",
col_provincia = "provincia")
require(wrapar)
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
muestra$id <- 1:nrow(muestra)
salida <- geocodeDirecciones(datos=muestra,
id_col= "id",
col_direccion = "direccion",
col_provincia = "provincia")
salida <- geocodeDirecciones(datos=muestra,
col_id= "id",
col_direccion = "direccion",
col_provincia = "provincia")
View(salida)
devtools::build()
devtools::install()
require(wrapar)
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
muestra$id <- 1:nrow(muestra)
salida <- geocodeDirecciones(datos=muestra,
col_id= "id",
col_direccion = "direccion",
col_provincia = "provincia")
muestra$provincia <- NULL
salidaMultiple <- geocodeDirecciones(datos=muestra,
col_id= "id",
col_direccion = "direccion",
col_provincia = "provincia",
max_returns = 2)
salidaMultiple <- geocodeDirecciones(datos=muestra,
col_id= "id",
col_direccion = "direccion",
max_returns = 2)
View(salidaMultiple)
devtools::build()
devtools::install()
require(wrapar)
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
muestra$id <- 1:nrow(muestra)
muestra$provincia <- NULL
salidaMultiple <- geocodeDirecciones(datos=muestra[1:2,],
col_id= "id",
col_direccion = "direccion",
max_returns = 2)
direccion <- muestra[1,'direccion']
provincia <- muestra[1,'provincia']
departamento \/
departamento <- muestra[1,'dep']
limit <-2
# attempt::stop_if(.x = api,.p = ~ !.x %in% c("datosgobar","gcba")
# msg = paste0("El valor de API es incorrecto. Debe ser ",paste(c("'datosgobar'","'gcba'"),collapse = " o ")))
urlApi <- switch(api,
"datosgobar" = "http://apis.datos.gob.ar/georef/api/direcciones",
"gcba" = "square")
api="datosgobar"
# attempt::stop_if(.x = api,.p = ~ !.x %in% c("datosgobar","gcba")
# msg = paste0("El valor de API es incorrecto. Debe ser ",paste(c("'datosgobar'","'gcba'"),collapse = " o ")))
urlApi <- switch(api,
"datosgobar" = "http://apis.datos.gob.ar/georef/api/direcciones",
"gcba" = "square")
out <- geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
limit = max_returns,
urlApi = urlApi)
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
geocodeDir <- function(direccion,provincia=NULL,departamento=NULL, limit=1,urlApi=NULL) {
if (gsub("[^0-9.-]", "", direccion)=="0") {
return(data.table(codigoAPI='Error'))
}
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = limit)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
gsub("[^0-9.-]", "", direccion)
checkInternet()
response <-httr::GET(urlApi,query=args)
checkResponseStatus(response)
jsonRes <- jsonlite::fromJSON(httr::content(response,'text',encoding = 'UTF-8'))
nMatchAPI<-jsonRes$cantidad
if(nMatchAPI==0) {
return(data.table(nMatchAPI,codigoAPI="Exito"))
} else {
geocodeResult <- data.table(jsonRes$direcciones)[,c("calle.nombre","departamento.nombre","localidad_censal.nombre","nomenclatura","ubicacion.lat","ubicacion.lon")][1,]
}
return(data.table(geocodeResult,nMatchAPI,codigoAPI="Exito"))
}
out <- geocodeDir(direccion=datos[x,col_direccion],
provincia=datos[x,col_provincia],
departamento =datos[x,col_departamento],
limit = max_returns,
urlApi = urlApi)
if (gsub("[^0-9.-]", "", direccion)=="0") {
return(data.table(codigoAPI='Error'))
}
args <- list(direccion=direccion,provincia = provincia,departamento=departamento,max = limit)
args <- args[!sapply(args,function(x) { (is.null(x) | class(x) %in% c('data.frame','data.table'))})]
args
gsub("[^0-9.-]", "", direccion)
checkInternet()
response <-httr::GET(urlApi,query=args)
# Funciones que tienen por objetivo detectar fallas en la conexión a internet
# o en la conexión con la API
checkInternet <- function(){
attempt::stop_if_not(.x = curl::has_internet(),msg = "Error: no se detecta conexión a internet.")
}
checkResponseStatus <- function(response){
attempt::stop_if_not(.x=response$status_code,
.p = ~ .x == 200,
msg = "Error: hubo algún problema en la respuesta de la API")
}
checkInternet()
response <-httr::GET(urlApi,query=args)
response
checkResponseStatus(response)
jsonRes <- jsonlite::fromJSON(httr::content(response,'text',encoding = 'UTF-8'))
nMatchAPI<-jsonRes$cantidad
jsonRes$direcciones
geocodeResult <- data.table(jsonRes$direcciones)[,c("calle.nombre","departamento.nombre","localidad_censal.nombre","nomenclatura","ubicacion.lat","ubicacion.lon")][1,]
library(data.table)
geocodeResult <- data.table(jsonRes$direcciones)[,c("calle.nombre","departamento.nombre","localidad_censal.nombre","nomenclatura","ubicacion.lat","ubicacion.lon")][1,]
geocodeResult
?txtProgressBar
devtools::build()
devtools::install()
require(wrapar)
load(url('https://github.com/datalab-UTDT/GIS2/raw/master/GoogleMaps/muestraEmpresas.RData'))
muestra$provincia <- "CABA"
muestra$id <- 1:nrow(muestra)
salida <- geocodeDirecciones(datos=muestra[1,2,],
col_id= "id",
col_direccion = "direccion",
col_provincia = "provincia")
salida <- geocodeDirecciones(datos=muestra[c(1,2),],
col_id= "id",
col_direccion = "direccion",
col_provincia = "provincia")
muestra$provincia <- NULL
salidaMultiple <- geocodeDirecciones(datos=muestra[1:2,],
col_id= "id",
col_direccion = "direccion",
max_returns = 2)
salidaMultiple <- geocodeDirecciones(datos=muestra[1:2,],
col_id= "id",
col_direccion = "direccion",
max_returns =3)
salidaMultiple <- geocodeDirecciones(datos=muestra[1:2,],
col_id= "id",
col_direccion = "direccion",
max_returns =10)
View(salidaMultiple)
library(devtools)
?devtools
build()
install()
build()
install()
build()
devtools::build()
devtools::build(document=TRU)
devtools::build(document=TRUe)
devtools::build(document=TRUE)
library(devtç)
library(devtool)
library(devtools)
devtools::build(document=TRUE)
build(document=TRUE)
build()
build()
devtools::build()

mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
geocoding <- "https://maps.googleapis.com/maps/api/geocode/json?address="
if(is.null(col_region)) {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&key=",datos$key,sep="")
} else {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&region=",datos$col_region,"&key=",datos$key,sep="")
}
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
salida <- list()
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 3)
for(i in 1:nrow(datos)) {
setTxtProgressBar(pb, x)
devolucion<-httr::GET(datos$query[i])
json <- httr::content(devolucion,"text")
output <- as.data.table(jsonlite::fromJSON(json))[,id:=datos$id[i]]
salida <- c(salida,list(output))
}
salida <- as.data.frame(rbindlist(salida))
return(salida)
}
muestra$key <- "AIzaSyA6RqIn4yOoGxk4V9oGTND4pN1k7ki9gKM"
muestra$id <- 1:nrow(muestra)
muestra$ciudad <- "CABA"
datosGoogle <- geocodeGoogle(datos = muestra,col_key = "key",col_id = "id",cols_query = c("direccion","ciudad"))
Q
#' Convertí tus direcciones a puntos usando APIs gratuitas y del gobierno argentino
#' @param datos obligatorio: data.frame o data.table con los datos a geolocalizar
#' @param col_key obligatorio: columna con la key para usar en cada una de las filas. Útil para superar las restricciones de Google
#' @param cols_id obligatorio:
#' @param cols_query obligatorio: Columnas que van a agregarse a la consulta de google
#' @param col_region opcional: Es posible agregar una columna con la región para forzar resultados en esa región (por ejemplo "AR")
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom utils setTxtProgressBar txtProgressBar
#' @export
#' @rdname geocodeDirecciones
#'
#' @return Un objeto data.frame con información sobre la ubicación espacial de direcciones de Argentina
#' @examples
#' \dontrun{
#' df <- data.frame(direccion=c("Figueroa Alcorta 7597","Pedro Goyena 330"),
#'             provincia=c("CABA","CABA"))
#' df$id <- 1:nrow(df)
#' df$key <-"alkfnaf901ehfassafqZ"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region=NULL)
#'
#' # Restringiendo resultados a Argentina
#' df$reg <- "AR"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region="reg")
#'
#' # Hay que cambiar el valor de la key por uno real para que funcione
#' }
geocodeGoogle <- function(datos =NULL,
col_key=NULL,
col_id=NULL,
cols_query=NULL,
col_region=NULL) {
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
datos <- as.data.frame(datos)
if(is.null(col_region)) {
mustExist <- c(col_id,cols_query,col_key)
} else {
mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
geocoding <- "https://maps.googleapis.com/maps/api/geocode/json?address="
if(is.null(col_region)) {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&key=",datos$key,sep="")
} else {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&region=",datos$col_region,"&key=",datos$key,sep="")
}
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
salida <- list()
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 3)
for(i in 1:nrow(datos)) {
setTxtProgressBar(pb, i)
devolucion<-httr::GET(datos$query[i])
json <- httr::content(devolucion,"text")
output <- as.data.table(jsonlite
#' Convertí tus direcciones a puntos usando APIs gratuitas y del gobierno argentino
#' @param datos obligatorio: data.frame o data.table con los datos a geolocalizar
#' @param col_key obligatorio: columna con la key para usar en cada una de las filas. Útil para superar las restricciones de Google
#' @param cols_id obligatorio:
#' @param cols_query obligatorio: Columnas que van a agregarse a la consulta de google
#' @param col_region opcional: Es posible agregar una columna con la región para forzar resultados en esa región (por ejemplo "AR")
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom utils setTxtProgressBar txtProgressBar
#' @export
#' @rdname geocodeDirecciones
#'
#' @return Un objeto data.frame con información sobre la ubicación espacial de direcciones de Argentina
#' @examples
#' \dontrun{
#' df <- data.frame(direccion=c("Figueroa Alcorta 7597","Pedro Goyena 330"),
#'             provincia=c("CABA","CABA"))
#' df$id <- 1:nrow(df)
#' df$key <-"alkfnaf901ehfassafqZ"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region=NULL)
#'
#' # Restringiendo resultados a Argentina
#' df$reg <- "AR"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region="reg")
#'
#' # Hay que cambiar el valor de la key por uno real para que funcione
#' }
geocodeGoogle <- function(datos =NULL,
col_key=NULL,
col_id=NULL,
cols_query=NULL,
col_region=NULL) {
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
datos <- as.data.frame(datos)
if(is.null(col_region)) {
mustExist <- c(col_id,cols_query,col_key)
} else {
mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
geocoding <- "https://maps.googleapis.com/maps/api/geocode/json?address="
if(is.null(col_region)) {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&key=",datos$key,sep="")
} else {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&region=",datos$col_region,"&key=",datos$key,sep="")
}
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
salida <- list()
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 3)
for(i in 1:nrow(datos)) {
setTxtProgressBar(pb, i)
devolucion<-httr::GET(datos$query[i])
json <- httr::content(devolucion,"text")
output <- as.data.table(jsonlite::fromJSON(json))[,id:=datos$id[i]]
salida <- c(salida,list(output))
}
salida <- as.data.frame(rbindlist(salida))
return(salida)
}
datosGoogle <- geocodeGoogle(datos = muestra,col_key = "key",col_id = "id",cols_query = c("direccion","ciudad"))
#' Convertí tus direcciones a puntos usando APIs gratuitas y del gobierno argentino
#' @param datos obligatorio: data.frame o data.table con los datos a geolocalizar
#' @param col_key obligatorio: columna con la key para usar en cada una de las filas. Útil para superar las restricciones de Google
#' @param cols_id obligatorio:
#' @param cols_query obligatorio: Columnas que van a agregarse a la consulta de google
#' @param col_region opcional: Es posible agregar una columna con la región para forzar resultados en esa región (por ejemplo "AR")
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom utils setTxtProgressBar txtProgressBar
#' @export
#' @rdname geocodeDirecciones
#'
#' @return Un objeto data.frame con información sobre la ubicación espacial de direcciones de Argentina
#' @examples
#' \dontrun{
#' df <- data.frame(direccion=c("Figueroa Alcorta 7597","Pedro Goyena 330"),
#'             provincia=c("CABA","CABA"))
#' df$id <- 1:nrow(df)
#' df$key <-"alkfnaf901ehfassafqZ"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region=NULL)
#'
#' # Restringiendo resultados a Argentina
#' df$reg <- "AR"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region="reg")
#'
#' # Hay que cambiar el valor de la key por uno real para que funcione
#' }
geocodeGoogle <- function(datos =NULL,
col_key=NULL,
col_id=NULL,
cols_query=NULL,
col_region=NULL) {
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
datos <- as.data.frame(datos)
if(is.null(col_region)) {
mustExist <- c(col_id,cols_query,col_key)
} else {
mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
geocoding <- "https://maps.googleapis.com/maps/api/geocode/json?address="
if(is.null(col_region)) {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&key=",datos$key,sep="")
} else {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&region=",datos$col_region,"&key=",datos$key,sep="")
}
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
salida <- list()
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 3)
for(i in 1:nrow(datos)) {
setTxtProgressBar(pb, i)
devolucion<-httr::GET(datos$query[i])
json <- httr::content(devolucion,"text")
output <- as.data.table(jsonlite::fromJSON(json))[,id:=datos$id[i]]
salida <- c(salida,list(output))
}
salida <- as.data.frame(rbindlist(salida,fill = TRU
#' Convertí tus direcciones a puntos usando APIs gratuitas y del gobierno argentino
#' @param datos obligatorio: data.frame o data.table con los datos a geolocalizar
#' @param col_key obligatorio: columna con la key para usar en cada una de las filas. Útil para superar las restricciones de Google
#' @param cols_id obligatorio:
#' @param cols_query obligatorio: Columnas que van a agregarse a la consulta de google
#' @param col_region opcional: Es posible agregar una columna con la región para forzar resultados en esa región (por ejemplo "AR")
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom utils setTxtProgressBar txtProgressBar
#' @export
#' @rdname geocodeDirecciones
#'
#' @return Un objeto data.frame con información sobre la ubicación espacial de direcciones de Argentina
#' @examples
#' \dontrun{
#' df <- data.frame(direccion=c("Figueroa Alcorta 7597","Pedro Goyena 330"),
#'             provincia=c("CABA","CABA"))
#' df$id <- 1:nrow(df)
#' df$key <-"alkfnaf901ehfassafqZ"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region=NULL)
#'
#' # Restringiendo resultados a Argentina
#' df$reg <- "AR"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region="reg")
#'
#' # Hay que cambiar el valor de la key por uno real para que funcione
#' }
geocodeGoogle <- function(datos =NULL,
col_key=NULL,
col_id=NULL,
cols_query=NULL,
col_region=NULL) {
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
datos <- as.data.frame(datos)
if(is.null(col_region)) {
mustExist <- c(col_id,cols_query,col_key)
} else {
mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
geocoding <- "https://maps.googleapis.com/maps/api/geocode/json?address="
if(is.null(col_region)) {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&key=",datos$key,sep="")
} else {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&region=",datos$col_region,"&key=",datos$key,sep="")
}
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
salida <- list()
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 3)
for(i in 1:nrow(datos)) {
setTxtProgressBar(pb, i)
devolucion<-httr::GET(datos$query[i])
json <- httr::content(devolucion,"text")
output <- as.data.table(jsonlite::fromJSON(json))[,id:=datos$id[i]]
salida <- c(salida,list(output))
}
salida <- as.data.frame(rbindlist(salida,fill = TRUE))
return(salida)
}
#' Convertí tus direcciones a puntos usando APIs gratuitas y del gobierno argentino
#' @param datos obligatorio: data.frame o data.table con los datos a geolocalizar
#' @param col_key obligatorio: columna con la key para usar en cada una de las filas. Útil para superar las restricciones de Google
#' @param cols_id obligatorio:
#' @param cols_query obligatorio: Columnas que van a agregarse a la consulta de google
#' @param col_region opcional: Es posible agregar una columna con la región para forzar resultados en esa región (por ejemplo "AR")
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom utils setTxtProgressBar txtProgressBar
#' @export
#' @rdname geocodeDirecciones
#'
#' @return Un objeto data.frame con información sobre la ubicación espacial de direcciones de Argentina
#' @examples
#' \dontrun{
#' df <- data.frame(direccion=c("Figueroa Alcorta 7597","Pedro Goyena 330"),
#'             provincia=c("CABA","CABA"))
#' df$id <- 1:nrow(df)
#' df$key <-"alkfnaf901ehfassafqZ"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region=NULL)
#'
#' # Restringiendo resultados a Argentina
#' df$reg <- "AR"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region="reg")
#'
#' # Hay que cambiar el valor de la key por uno real para que funcione
#' }
geocodeGoogle <- function(datos =NULL,
col_key=NULL,
col_id=NULL,
cols_query=NULL,
col_region=NULL) {
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
datos <- as.data.frame(datos)
if(is.null(col_region)) {
mustExist <- c(col_id,cols_query,col_key)
} else {
mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
geocoding <- "https://maps.googleapis.com/maps/api/geocode/json?address="
if(is.null(col_region)) {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&key=",datos$key,sep="")
} else {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&region=",datos$col_region,"&key=",datos$key,sep="")
}
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
salida <- list()
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 3)
for(i in 1:nrow(datos)) {
setTxtProgressBar(pb, i)
devolucion<-httr::GET(datos$query[i])
json <- httr::content(devolucion,"text")
output <- as.data.table(jsonlite::fromJSON(json))[,id:=datos$id[i]]
salida <- c(salida,list(output))
}
salida <- as.data.frame(rbindlist(salida,fill = TRUE))
return(salida)
}
datosGoogle <- geocodeGoogle(datos = muestra,col_key = "key",col_id = "id",cols_query = c("direccion","ciudad"))
table(datosGoogle$id)
table(datosGoogle$id>1)
View(datosGoogle)
df$key
datos$key
muestra$key
datos <- muestra
col_key = "key"
col_id = "id"
cols_query = c("direccion","ciudad")
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
datos <- as.data.frame(datos)
if(is.null(col_region)) {
mustExist <- c(col_id,cols_query,col_key)
} else {
mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
col_region <- NULL
if(is.null(col_region)) {
mustExist <- c(col_id,cols_query,col_key)
} else {
mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
geocoding <- "https://maps.googleapis.com/maps/api/geocode/json?address="
if(is.null(col_region)) {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&key=",datos$key,sep="")
} else {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&region=",datos$col_region,"&key=",datos$key,sep="")
}
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
datos$query
table(datos$query)
View(datos$query)
datos$query[495]
datos$query[i]
i <-495
devolucion<-httr::GET(datos$query[i])
devolucion
devolucion<-httr::GET(datos$query[491])
devolucion
query <- datos$query[495]
query
query <- https://maps.googleapis.com/maps/api/geocode/json?address=SCALABRINI%20ORTIZ%202340+CABA&key=AIzaSyA6RqIn4yOoGxk4V9oGTND4pN1k7ki9gKM
query <- "https://maps.googleapis.com/maps/api/geocode/json?address=SCALABRINI%20ORTIZ%202340+CABA&key=AIzaSyA6RqIn4yOoGxk4V9oGTND4pN1k7ki9gKM"
View(muestra)
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
datos$query <- gsub(pattern = "#",replacement = "",x = datos$query)
datos$query
i <- 495
devolucion<-httr::GET(datos$query[i])
devolucion
json <- httr::content(devolucion,"text")
json
output <- as.data.table(jsonlite::fromJSON(json))[,id:=datos$id[i]]
output
output
#' Convertí tus direcciones a puntos usando APIs gratuitas y del gobierno argentino
#' @param datos obligatorio: data.frame o data.table con los datos a geolocalizar
#' @param col_key obligatorio: columna con la key para usar en cada una de las filas. Útil para superar las restricciones de Google
#' @param cols_id obligatorio:
#' @param cols_query obligatorio: Columnas que van a agregarse a la consulta de google
#' @param col_region opcional: Es posible agregar una columna con la región para forzar resultados en esa región (por ejemplo "AR")
#' @import data.table
#' @importFrom attempt stop_if_all
#' @importFrom jsonlite fromJSON
#' @importFrom httr GET content
#' @importFrom utils setTxtProgressBar txtProgressBar
#' @export
#' @rdname geocodeDirecciones
#'
#' @return Un objeto data.frame con información sobre la ubicación espacial de direcciones de Argentina
#' @examples
#' \dontrun{
#' df <- data.frame(direccion=c("Figueroa Alcorta 7597","Pedro Goyena 330"),
#'             provincia=c("CABA","CABA"))
#' df$id <- 1:nrow(df)
#' df$key <-"alkfnaf901ehfassafqZ"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region=NULL)
#'
#' # Restringiendo resultados a Argentina
#' df$reg <- "AR"
#' geocodeGoogle(datos=df,col_id="id",col_key="key", cols_query=c("direccion","provincia"),region="reg")
#'
#' # Hay que cambiar el valor de la key por uno real para que funcione
#' }
geocodeGoogle <- function(datos =NULL,
col_key=NULL,
col_id=NULL,
cols_query=NULL,
col_region=NULL) {
attempt::stop_if(.x = class(datos),.p = ~ !any(.x %in% c('data.frame','data.table')),
msg = "Revisá si pasaste los datos en el parámetro 'datos'.\nTenés que pasar un objeto que sea clase 'data.frame' o 'data.table'")
datos <- as.data.frame(datos)
if(is.null(col_region)) {
mustExist <- c(col_id,cols_query,col_key)
} else {
mustExist <- c(col_id,cols_query,col_key,col_region)
}
faltantes <- mustExist[!mustExist %in% colnames(datos)]
attempt::stop_if(.x = length(faltantes)>0, .p = ~ .x == TRUE,
msg = paste("Hay algunos nombres de columnas que no se encuentran\n en los datos que pasaste:",
paste0(sapply(faltantes,function(x){paste("'",x,"'",sep = "")}),collapse=","),sep=" "))
geocoding <- "https://maps.googleapis.com/maps/api/geocode/json?address="
if(is.null(col_region)) {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&key=",datos$key,sep="")
} else {
datos$query <- paste(geocoding, do.call(paste, c(datos[cols_query], sep="+")),"&region=",datos$col_region,"&key=",datos$key,sep="")
}
datos$query <- gsub(pattern = " ",replacement = "%20",x = datos$query)
datos$query <- gsub(pattern = "#",replacement = "",x = datos$query)
salida <- list()
pb <- txtProgressBar(min = 1, max = nrow(datos), style = 3)
for(i in 1:nrow(datos)) {
setTxtProgressBar(pb, i)
devolucion<-httr::GET(datos$query[i])
json <- httr::content(devolucion,"text")
output <- as.data.table(jsonlite::fromJSON(json))[,id:=datos$id[i]]
salida <- c(salida,list(output))
}
salida <- as.data.frame(rbindlist(salida,fill = TRUE))
return(salida)
}
datosGoogle <- geocodeGoogle(datos = muestra,col_key = "key",col_id = "id",cols_query = c("direccion","ciudad"))
salida
View(datosGoogle)
rus2017 <-read_sf("http://cdn.buenosaires.gob.ar/datosabiertos/datasets/relevamiento-usos-del-suelo/relevamiento-usos-suelo-2017.geojson")
rus2017 <-sf::read_sf("http://cdn.buenosaires.gob.ar/datosabiertos/datasets/relevamiento-usos-del-suelo/relevamiento-usos-suelo-2017.geojson")
rus2017$X[1]
rus2017$RAMA
table(rus2017$RAMA)
table(rus2017$TIPO1_16)
table(rus2017$TIPO2_16)
table(rus2017$SSRAMA)
table(rus2017$RAMA)
rus2017 <- rus2017[!rus2017$RAMA %in% c("VIAS TREN","VIAS DE PREMETRO","UNIFICADO","PLAZOLETA","TERRENOS FERROVIARIOS","OTROS","LOTE","LOCAL CERRADO","BAJO AUTOPISTA"),]
nrow(rus)
nrow(rus2017)
rus2017$RAMA
sum(rus2017$RAMA %in% c("VIAS TREN","VIAS DE PREMETRO","UNIFICADO","PLAZOLETA","TERRENOS FERROVIARIOS","OTROS","LOTE","LOCAL CERRADO","BAJO AUTOPISTA"))
sum(rus2017$RAMA %in% c("VIAS TREN","VIAS DE PREMETRO","UNIFICADO","PLAZOLETA","TERRENOS FERROVIARIOS","OTROS","LOTE","LOCAL CERRADO","BAJO AUTOPISTA","EDIFICIOS"))
table(rus2017$RAMA)
rus2017 <- rus2017$RAMA %in% c("VIAS TREN","VIAS DE PREMETRO","UNIFICADO","PLAZOLETA","TERRENOS FERROVIARIOS","OTROS","LOTE","LOCAL CERRADO","BAJO AUTOPISTA","EDIFICIOS")
rus2017 <- rus2017[rus2017$RAMA %in% c("VIAS TREN","VIAS DE PREMETRO","UNIFICADO","PLAZOLETA","TERRENOS FERROVIARIOS","OTROS","LOTE","LOCAL CERRADO","BAJO AUTOPISTA","EDIFICIOS"),]
rus2017 <-sf::read_sf("http://cdn.buenosaires.gob.ar/datosabiertos/datasets/relevamiento-usos-del-suelo/relevamiento-usos-suelo-2017.geojson")
rus2017 <- rus2017[rus2017$RAMA %in% c("VIAS TREN","VIAS DE PREMETRO","UNIFICADO","PLAZOLETA","TERRENOS FERROVIARIOS","OTROS","LOTE","LOCAL CERRADO","BAJO AUTOPISTA","EDIFICIOS"),]
rus2017 <- rus2017[,c("X","Y","RAMA")]
rus2017 <-sf::read_sf("http://cdn.buenosaires.gob.ar/datosabiertos/datasets/relevamiento-usos-del-suelo/relevamiento-usos-suelo-2017.geojson")
rus2017 <- rus2017[!rus2017$RAMA %in% c("VIAS TREN","VIAS DE PREMETRO","UNIFICADO","PLAZOLETA","TERRENOS FERROVIARIOS","OTROS","LOTE","LOCAL CERRADO","BAJO AUTOPISTA","EDIFICIOS"),]
rus2017 <- rus2017[,c("X","Y","RAMA")]
sf::st_write(rus2017,"rus2017ss.geojson")
sample(nrow(rus2017),size = 100000)
sf::st_write(rus2017[sample(nrow(rus2017),size = 100000),],"rus2017ss.geojson")
sf::st_write(rus2017[sample(nrow(rus2017),size = 100000),],"rus2017ss.geojson")
